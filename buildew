#!/bin/bash

GOLANG_VERSION=1.23.2

COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --golang-version)
        GOLANG_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done

if [[ "$(go version)" =~ .*([0-9]+\.[0-9]+\.[0-9]+).* ]]; then
    ACTUAL_GOLANG_VERSION="${BASH_REMATCH[1]}"
    if [ "$ACTUAL_GOLANG_VERSION" != "$GOLANG_VERSION" ]; then
        echo WARNING:
        echo Desired Go lang version is $GOLANG_VERSION
        echo Actual Go lang version is $ACTUAL_GOLANG_VERSION
    fi
fi

# ========================= LOCAL ENVIRONMENT VARIABLES =======================

if [ -f '.env' ]; then
    echo Use .env file to read sensitive information
    while IPS='=' read -r key _; do
        if [ "${key}" != "" ] && [[ ! "${key}" =~ .*#.* ]]; then
            eval "export ${key}"
        fi
    done <'.env'
else
    # REGENERATE SENSITIVE INFO FROM TEMPLATE
    cat >'.env' <<EOF
# Golang package version (without v)
HEXI_PACKAGE_VERSION=0.0.0
EOF
fi

# Warn: HEXI_PACKAGE_VERSION read from .env file

# =============================================================================

if [ "$COMMAND" == "tests" ] || [ "$COMMAND" == "test" ]; then
    CD=$PWD
    cd ./tests || exit
    go test
    cd $CD || exit
fi

if [ "$COMMAND" == "version" ]; then
    echo Previous version "$HEXI_PACKAGE_VERSION"
    echo Please enter new version \(format: x.y.z, where x, y and z are integer numbers\)
    read NEW_HEXI_PACKAGE_VERSION

    echo $NEW_HEXI_PACKAGE_VERSION
    # Check version format
    [[ "$NEW_HEXI_PACKAGE_VERSION" =~ [0-9]+\.[0-9]+\.[0-9]+ ]] || ( echo ERROR: wrong version format; exit 1 )

    # Replace versions in go.mod files
    find . -name go.mod -exec sed -i "s/$HEXI_PACKAGE_VERSION/$NEW_HEXI_PACKAGE_VERSION/g" '{}' \;
    [ $? -eq 0 ] || ( echo Fail replace version in go.mod files; exit 1 ) 

    # Replace version in README.md
    sed -i "s/$HEXI_PACKAGE_VERSION/$NEW_HEXI_PACKAGE_VERSION/g" ./README.md
    [ $? -eq 0 ] || ( echo Fail replace version in README.md; exit 1 )

    if [ "$HEXI_PACKAGE_VERSION" != "$NEW_HEXI_PACKAGE_VERSION" ]; then
        git add .
        git commit -m "There is the new version $NEW_HEXI_PACKAGE_VERSION"
        git push
        TAG_NAME="v$NEW_HEXI_PACKAGE_VERSION"
        git tag "$TAG_NAME"
        git tag "ft/$TAG_NAME"
        git tag "tests/$TAG_NAME"

        git push origin tag "$TAG_NAME"
        git push origin tag "ft/$TAG_NAME"
        git push origin tag "tests/$TAG_NAME"

    fi

    # Replace version in .env file
    sed -i "s/$HEXI_PACKAGE_VERSION/$NEW_HEXI_PACKAGE_VERSION/g" ./.env
fi

if [ "$COMMAND" == "generate" ] || [ "$COMMAND" == "gen" ]; then
    SCRIPTS=($(find . -type f -name "gen.go"))
    for SCRIPT in "${SCRIPTS[@]}"; do
        go generate $SCRIPT
    done
fi

# =================================================================================================

AVAILABLE_COMMANDS="test tests version gen"
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || (echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS")
